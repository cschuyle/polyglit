{"version":3,"sources":["images/popout-flat.png","Showcase.tsx","HomePage.tsx","reportWebVitals.ts","index.tsx"],"names":["compareTroveItem","a","b","littlePrinceItem","language","BigWhiteTooltip","withStyles","arrow","border","color","tooltip","fontSize","backgroundColor","Tooltip","Showcase","props","state","troveItems","displayedTroveItems","searchText","onlyDuplicates","this","fetchTrove","then","trove","console","log","items","length","setState","sort","search","fetch","troveUrl","res","json","id","className","pageHeader","style","display","width","TextField","label","type","variant","value","onChange","e","onSearchTextChanged","placeholder","marginLeft","float","FormControlLabel","control","Checkbox","checked","onOnlyDuplicatesChanged","title","href","interactive","placement","collectionTitle","map","troveItem","index","renderTroveItem","target","currentTarget","filter","troveItemMatches","searchByText","_","toLowerCase","includes","join","searchByDuplicates","quantity","key","troveItemTooltipContents","enterDelay","enterNextDelay","largeImageUrl","position","src","smallImageUrl","alt","files","file","renderExtraFile","createRow","field","rows","constructLanguage","constructTranslationTitle","script","translator","illustrator","narrator","isbn13","format","constructPublicationBlurb","year","comments","constructTagsBlurb","tags","isPresent","row","undefined","translationTitle","transliterated","spokenIn","right","margin","bottom","rel","popoutFlat","height","padding","marginTop","opacity","item","publisher","publicationLocation","publicationCountry","React","Component","HomePage","body","children","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","process","path","exact","component","textAlign","document","getElementById"],"mappings":"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","file":"static/js/main.a3bc1923.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/popout-flat.8676d87d.png\";","import React from 'react';\nimport popoutFlat from \"./images/popout-flat.png\"\nimport {Checkbox, FormControlLabel, TextField, Tooltip, withStyles} from \"@material-ui/core\";\n\ninterface TroveItem {\n    littlePrinceItem: {\n        title: string,\n        largeImageUrl: string,\n        language: string,\n        smallImageUrl: string,\n        format?: string,\n        illustrator?: string,\n        isbn13?: string,\n        narrator?: string,\n        \"publication-country\"?: string,\n        \"publication-location\"?: string,\n        publisher?: string,\n        quantity?: number,\n        translator?: string,\n        year?: string,\n        files?: string[],\n\n        \"translation-title\"?: string,\n        \"translation-title-transliterated\"?: string,\n        \"language-spoken-in\"?: string,\n        \"script\"?: string,\n        \"tags\"?: string[],\n        \"comments\"?: string\n    }\n}\n\nfunction compareTroveItem(a: TroveItem, b: TroveItem) {\n    if (a.littlePrinceItem.language >= b.littlePrinceItem.language) {\n        return 1\n    }\n    return -1\n}\n\ninterface Trove {\n    id: string,\n    name: string,\n    shortName: string,\n    items: TroveItem[]\n}\n\ninterface ShowcaseState {\n    troveItems: TroveItem[],\n    displayedTroveItems: TroveItem[],\n    searchText: string\n    onlyDuplicates: boolean\n}\n\ninterface ShowcaseProps {\n    pageHeader: string\n    troveUrl: string\n    collectionTitle: string\n}\n\nconst BigWhiteTooltip = withStyles({\n    arrow: {\n        \"&:before\": {\n            border: \"1px solid #E6E8ED\"\n        },\n        color: \"white\"\n    },\n    tooltip: {\n        fontSize: \"1em\",\n        backgroundColor: \"white\",\n        border: \"1px solid #E6E8ED\",\n        color: \"gray\"\n    }\n})(Tooltip);\n\n\nclass Showcase extends React.Component<ShowcaseProps, ShowcaseState> {\n\n    constructor(props: ShowcaseProps) {\n        super(props)\n        this.state = {\n            troveItems: [],\n            displayedTroveItems: [],\n            searchText: \"\",\n            onlyDuplicates: false\n        }\n    }\n\n    componentDidMount() {\n        this.fetchTrove().then(trove => {\n            console.log(`Got ${trove.items.length} Trove items`)\n            this.setState({troveItems: trove.items.sort(compareTroveItem)});\n            this.search(\"\", false)\n        })\n    }\n\n    fetchTrove() {\n        return fetch(this.props.troveUrl)\n            .then(res => {\n                return res.json() as Promise<Trove>\n            })\n    }\n\n    render() {\n        return (\n            <div id=\"main_content_wrap\" className=\"outer\">\n                <div id=\"main_content\" className=\"inner\">\n                    <h1>{this.props.pageHeader}</h1>\n                    <p>My collection, painstakingly acquired over the years.</p>\n\n                    <span>\n                        <div>\n                            <div style={{display: \"flex\"}}>\n                                <div style={{width: \"90%\"}}>\n                                    <TextField label=\"Search by language, country, or title\"\n                                               type=\"search\" variant=\"outlined\"\n                                               style={{width: \"100%\"}}\n                                               value={this.state.searchText}\n                                               onChange={e => this.onSearchTextChanged(e)}\n                                               placeholder=\"Search by language, country, or title\"\n                                    />\n                                </div>\n                                <div style={{marginLeft: \"20px\"}}>\n                                    <div style={{float: \"left\"}}>\n                                        <FormControlLabel\n                                            control={\n                                                <Checkbox\n                                                    checked={this.state.onlyDuplicates}\n                                                    onChange={e => this.onOnlyDuplicatesChanged(e)}\n                                                    color=\"default\"\n                                                />\n                                            }\n                                            label={\n                                                <BigWhiteTooltip\n                                                    title={<section>Send me an email at <a\n                                                        href=\"mailto:carl@dragnon.com\">carl@dragnon.com</a></section>}\n                                                    arrow\n                                                    interactive\n                                                    placement=\"bottom-start\">\n                                                    <div>Show only copies for which I have duplicates <i><strong>(want\n                                                        to make a\n                                                        deal?)</strong></i>\n                                                    </div>\n                                                </BigWhiteTooltip>\n                                            }\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <p/>\n                        <section>\n                            Showing {this.state.displayedTroveItems.length} of {this.state.troveItems.length} editions of {this.props.collectionTitle}\n                        </section>\n                        <p/>\n                        <section className=\"column\">\n                            {\n                                this.state.displayedTroveItems.map((troveItem, index) => {\n                                    return this.renderTroveItem(troveItem, index)\n                                })\n                            }\n                        </section>\n                    </span>\n                </div>\n            </div>\n        );\n    }\n\n    private onSearchTextChanged(e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) {\n        this.setState({\n            searchText: e.target.value\n        });\n        this.search(e.currentTarget.value, this.state.onlyDuplicates);\n    }\n\n    private onOnlyDuplicatesChanged(e: React.ChangeEvent<HTMLInputElement>) {\n        console.log(`only duplicates value is ${e.currentTarget.checked}`)\n        this.setState({\n            searchText: this.state.searchText,\n            onlyDuplicates: e.target.checked\n        });\n        this.search(this.state.searchText, e.currentTarget.checked);\n    }\n\n    private search(searchText: string, onlyDuplicates: boolean) {\n        this.setState({\n            displayedTroveItems: this.state.troveItems.filter(this.troveItemMatches(searchText, onlyDuplicates))\n        })\n    }\n\n    private troveItemMatches(searchText: string, onlyDuplicates: boolean) {\n\n        let searchByText = (_: TroveItem) => {\n            return true\n        }\n\n        if (searchText) {\n            searchByText = (troveItem) => {\n                return (\n                    troveItem.littlePrinceItem.language.toLowerCase().includes(searchText.toLowerCase()) ||\n                    troveItem.littlePrinceItem.title.toLowerCase().includes(searchText.toLowerCase()) ||\n                    troveItem.littlePrinceItem[\"publication-country\"]?.toLowerCase().includes(searchText.toLowerCase()) ||\n                    troveItem.littlePrinceItem[\"publication-location\"]?.toLowerCase().includes(searchText.toLowerCase()) ||\n                    troveItem.littlePrinceItem[\"tags\"]?.join(\"/\").toLowerCase().includes(searchText.toLowerCase()) ||\n                    troveItem.littlePrinceItem[\"translation-title\"]?.toLowerCase().includes(searchText.toLowerCase()) ||\n                    troveItem.littlePrinceItem[\"translation-title-transliterated\"]?.toLowerCase().includes(searchText.toLowerCase()) ||\n                    troveItem.littlePrinceItem[\"language-spoken-in\"]?.toLowerCase().includes(searchText.toLowerCase())\n                ) || false\n            }\n        }\n\n        let searchByDuplicates = searchByText\n\n        if (onlyDuplicates) {\n            searchByDuplicates = troveItem => {\n                return searchByText(troveItem) && (troveItem.littlePrinceItem.quantity ?? 1) > 1\n            }\n        }\n\n        return searchByDuplicates\n    }\n\n    private renderTroveItem(troveItem: TroveItem, key: any) {\n        return <BigWhiteTooltip\n            title={this.troveItemTooltipContents(troveItem)}\n            arrow\n            interactive\n            placement=\"right-start\"\n            enterDelay={300}\n            enterNextDelay={300}\n        >\n            <div className=\"thumbnail\" key={key}>\n                <a href={troveItem.littlePrinceItem.largeImageUrl}>\n                    <div style={{position: \"relative\"}}>\n                        <img width=\"150\"\n                             src={troveItem.littlePrinceItem.smallImageUrl}\n                            // title={troveItem.littlePrinceItem.title}\n                             alt={troveItem.littlePrinceItem.title}\n                        />\n                        <div className=\"caption\">{troveItem.littlePrinceItem.language}</div>\n                        {\n                            troveItem.littlePrinceItem.files?.map(file => {\n                                return this.renderExtraFile(file)\n                            })\n                        }\n                    </div>\n                </a>\n            </div>\n        </BigWhiteTooltip>\n\n    }\n\n    private troveItemTooltipContents(troveItem: TroveItem) {\n\n        let fieldsInOrder: string[] = [\n            \"translation-title\",\n            \"translation-title-transliterated\",\n            'language',\n            \"script\",\n            'translator',\n            'illustrator',\n            'narrator',\n            'isbn13',\n            'format',\n            'year',\n            'publisher',\n            'publication-country',\n            'publication-location',\n            \"tags\",\n            \"comments\"\n        ]\n\n        let createRow = (field: string | null, value: any) => ({field, value})\n\n        let rows = fieldsInOrder.map(field => {\n            switch (field) {\n                case 'language':\n                    return createRow(\"Language\", this.constructLanguage(troveItem))\n                case 'translation-title':\n                    return createRow(\"Title in translation\", this.constructTranslationTitle(troveItem))\n                case 'script':\n                    return createRow(\"Script\", troveItem.littlePrinceItem.script)\n                case 'translator':\n                    return createRow(\"Translated by\", troveItem.littlePrinceItem.translator)\n                case 'illustrator':\n                    return createRow(\"Illustrated by\", troveItem.littlePrinceItem.illustrator)\n                case 'narrator':\n                    return createRow(\"Narrated by\", troveItem.littlePrinceItem.narrator)\n                case 'isbn13':\n                    return createRow(\"ISBN-13\", troveItem.littlePrinceItem.isbn13)\n                case 'format':\n                    return createRow(\"Format\", troveItem.littlePrinceItem.format)\n                case 'publisher':\n                    return createRow(\"Published\", this.constructPublicationBlurb(troveItem.littlePrinceItem))\n                case 'year':\n                    return createRow(\"Publication year\", troveItem.littlePrinceItem.year)\n                case 'comments':\n                    return createRow(null, troveItem.littlePrinceItem.comments)\n                case 'tags':\n                    return createRow(\"Tags\", this.constructTagsBlurb(troveItem.littlePrinceItem.tags))\n            }\n        }).filter(e => e != null && this.isPresent(e.value))\n\n        return <div>\n            <strong><i>{troveItem.littlePrinceItem.title}</i></strong>\n            <p/>{\n            rows.map((row) => {\n                    if (row?.field != null) {\n                        return <span><strong>{row?.field}:</strong> {row?.value}\n                            <p/>\n                </span>\n                    }\n                    return <span>{row?.value}</span>\n                }\n            )}\n        </div>\n    }\n\n    private isPresent(e: any): Boolean {\n        return e != undefined && e != ''\n    }\n\n    private constructTranslationTitle(troveItem: TroveItem) {\n        let translationTitle = troveItem.littlePrinceItem['translation-title'];\n        let transliterated = troveItem.littlePrinceItem['translation-title-transliterated'];\n        if (this.isPresent(transliterated)) {\n            return `${translationTitle} [${transliterated}]`;\n        }\n        return troveItem.littlePrinceItem['translation-title'];\n    }\n\n    private constructLanguage(troveItem: TroveItem) {\n        let language = troveItem.littlePrinceItem.language;\n        let spokenIn = troveItem.littlePrinceItem['language-spoken-in'];\n        if (spokenIn != null) {\n            return `${language} (spoken in ${spokenIn})`\n        }\n        return language;\n    }\n\n    private renderExtraFile(file: string) {\n        return <div style={{\n            position: \"absolute\",\n            right: \"0px\",\n            margin: \"-0.8em 1em 0px\"\n        }}>\n\n            <span style={{bottom: \"0px\", right: \"0px\"}}>\n            <a href={file}\n               target=\"_blank\"\n               rel=\"noreferrer\">\n            <img src={popoutFlat}\n                 title={`Open in new tab: ${file}`}\n                 alt=\"Open\"\n                 style={{\n                     height: \"1.3em\",\n                     width: \"1.3em\",\n                     padding: \"0.2em\",\n                     marginTop: \"0.2em\",\n                     float: \"left\",\n                     opacity: \"0.6\"\n                 }}\n            />\n            </a>\n            </span>\n        </div>\n    }\n\n    private constructPublicationBlurb(item: { title: string; largeImageUrl: string; language: string; smallImageUrl: string; format?: string; illustrator?: string; isbn13?: string; narrator?: string; \"publication-country\"?: string; \"publication-location\"?: string; publisher?: string; quantity?: number; translator?: string; year?: string; files?: string[]; \"translation-title\"?: string; \"translation-title-transliterated\"?: string; \"language-spoken-in\"?: string; script?: string; tags?: string[]; comments?: string }) {\n        let publisher = item.publisher\n        let publicationLocation = item['publication-location']\n        let publicationCountry = item['publication-country']\n        if (!(this.isPresent(publisher) || this.isPresent(publicationLocation) || this.isPresent(publicationCountry))) {\n            return null\n        }\n        if (!this.isPresent(publisher) && !this.isPresent(publicationLocation)) {\n            return `in ${publicationCountry}`\n        }\n        if (!this.isPresent(publisher) && !this.isPresent(publicationCountry)) {\n            return `in ${publicationLocation}`\n        }\n        if (!this.isPresent(publicationLocation) && !this.isPresent(publicationCountry)) {\n            return `by ${publisher}`\n        }\n        if (this.isPresent(publisher) && !this.isPresent(publicationCountry)) {\n            return `by ${publisher} in ${publicationLocation}`\n        }\n        if (this.isPresent(publisher) && !this.isPresent(publicationLocation)) {\n            return `by ${publisher} in ${publicationCountry}`\n        }\n        return `by ${publisher} in ${publicationLocation}, ${publicationCountry}`\n    }\n\n    private constructTagsBlurb(tags: string[] | undefined): string | null {\n        if (!this.isPresent(tags)) {\n            return null\n        }\n        return tags!!.join(\", \")\n    }\n}\n\nexport default Showcase;\n","import React from 'react';\nimport ReactMarkdown from 'react-markdown'\n\nclass HomePage extends React.Component {\n\n    body = `\n# TL; DR\n\n- [The Little Prince](./the-little-prince)\n- [The Hobbit](./the-hobbit)\n- [The Adventures of Alice in Wonderland](./alice-in-wonderland)\n- [Other titles](./other-titles)\n\n# What's a Polyglit??\n\nThat's me being clever by abbreviating the phrase \"Polyglot Literature\".\n\nActually, it's not an abbreviation.  It's not even a contraction.  \nIt's a [portmanteau](https://en.wikipedia.org/wiki/Portmanteau)\n\n---\n\nThis site contains a summary of various works of literature that I've acquired over the years, in languages other \nthan my native one (which is English).\n\n\n## The Little Prince\n \n[The Little Prince](the-little-prince) is one of the most widely translated books around, so it only makes sense to \ncollect those.\n  \nGranted, this is not a particularly original endeavor - lots of folks collect this one.  A few that I've found:\n* [petit-prince-collection](http://www.petit-prince-collection.com/lang/traducteurs.php?lang=en)\n* [petit-prince.at](http://www.petit-prince.at/collection.htm)\n* [genius.com/Antoine-de-saint-exupery-collection-of-the-little-prince-editions-annotated](https://genius.com/Antoine-de-saint-exupery-collection-of-the-little-prince-editions-annotated) - Fairly complete looking list of editions, with metadata!\n* [malyksiaze.net](https://malyksiaze.net/en) - This one has a \"let's make a deal\" page\n\n## A couple other likely targets\n\nIf I'm in a store trying to find a book in language _X_, and can't find The Little Prince, \nI'll generally go for [The Hobbit](the-hobbit), or [Alice in Wonderland](alice-in-wonderland) (yes, I know that the actual title is _Alice's Adventures in Wonderland_).\n\n## Nope, try again\n\nFailing the above, I cast about for whatever I can find: Translations into local languages or local literature.\nI like to find children's books because it's easier to learn from them as a beginner.\nAnd of course, language learning materials.\nHere are some of the books [not originally in English](other-titles) that I've acquired.\n   \n## Translations are boring\n\nThe astute among you have noticed that all the above are translations.  \nSo, here are some books I've acquired over the years in their original language:\n* Das Kapital (German)\n* Le Petit Prince (French)\n* Mосква 2042 (Russian)\n* Embers (Hungarian)\n* 2666 (Spanish)\n* Kéraban le tétu (French)\n* Mais où sont passées les Indo Européens? (French)\n* Python для дітей (Ukrainian)\n* De ontdekking van de hemel (Dutch)\n* Распу́тин (Russian)\n* À la recherche du temps perdu (French)\n* La Possibilité d'une île (French)\n* 三体 (Mandarin)\n* Ciacole al pedocin (Triestese)\n* Évkönyv (Hungarian)\n* Innansveitarkronika (Icelandic)\n* Βίος και Πολιτεία του Αλέξη Ζορμπά (Greek)\n* Örtlich Betäubt (German)\n* Marvirinstrato (Esperanto) \n* Le capital au XXIe siècle`\n\n    render() {\n        return (\n            <div id=\"main_content_wrap\" className=\"outer\">\n                <section id=\"main_content\" className=\"inner\">\n                    <ReactMarkdown children={this.body}/>\n                </section>\n            </div>\n        )\n    }\n}\n\nexport default HomePage;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './css/index.css';\nimport './css/style.css';\nimport './css/image-grid.css';\nimport './css/polyglit.css';\nimport './css/Showcase.css';\n\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\n\nimport Showcase from './Showcase';\nimport HomePage from './HomePage';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <div id=\"header_wrap\" className=\"outer\">\n            <header className=\"inner\">\n                <h1 id=\"project_title\">polyglit</h1>\n                <h2 id=\"project_tagline\">A collection of literary works in Lots of Languages</h2>\n            </header>\n        </div>\n\n        <Router basename={process.env.PUBLIC_URL}>\n            <Switch>\n                <Route path=\"/\" exact component={() => <HomePage/>}/>\n                <Route path=\"/the-little-prince\" exact component={() =>\n                    <Showcase\n                        pageHeader=\"The Little Prince (Le Petit Prince) by Antoine de Saint-Exupéry\"\n                        troveUrl={\"https://moocho-test.s3-us-west-2.amazonaws.com/public/little-prince\"}\n                        collectionTitle=\"The Little Prince\"\n                    />}\n                />\n                <Route path=\"/the-hobbit\" exact component={() =>\n                    <Showcase\n                        pageHeader=\"The Hobbit, or There and Back Again - by J.R.R. Tolkien\"\n                        troveUrl={\"https://moocho-test.s3-us-west-2.amazonaws.com/public/hobbit\"}\n                        collectionTitle = \"The Hobbit\"\n                    />}\n                />\n                <Route path=\"/alice-in-wonderland\" exact component={() =>\n                    <Showcase\n                        pageHeader=\"Alice's Adventures in Wonderland, by Lewis Carroll\"\n                        troveUrl={\"https://moocho-test.s3-us-west-2.amazonaws.com/public/alice-in-wonderland\"}\n                        collectionTitle = \"Alice in Wonderland\"\n                    />}\n                />\n                <Route path=\"/other-titles\" exact component={() =>\n                    <Showcase\n                        pageHeader=\"Collection: Not originally in English\"\n                        troveUrl={\"https://moocho-test.s3-us-west-2.amazonaws.com/public/books\"}\n                        collectionTitle = \"opportunistically-acquired titles, either translated from, or in the original non-English text\"\n                    />}\n                />\n            </Switch>\n        </Router>\n\n        <div id=\"footer_wrap\" className=\"outer\">\n            <footer className=\"inner\">\n                <p style={{textAlign: \"center\"}}>polyglit maintained by <a href=\"https://dragnon.com\">Carlton\n                    Schuyler</a></p>\n            </footer>\n        </div>\n\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}